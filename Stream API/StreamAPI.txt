A Stream in Java can be defined as a sequence of elements from a source. The source of elements here refers to a Collection or Array that provides data to the Stream.
Java streams are designed in such a way that most of the stream operations (called intermediate operations) return a Stream. This helps to create a chain of stream operations. This is called stream pipe-lining.
Java streams also support the aggregate or terminal operations on the elements. The aggregate operations are finding the max or min element, finding the first element matching giving criteria, and so on.
Not that a stream maintains the same ordering of the elements as the ordering in the stream source.

A Collection is an in-memory data structure, which holds all the values that the data structure currently has.

While a Stream is conceptually a pipeline, in which elements are computed on demand.

In Java, java.util.Stream interface represents a stream on which one or more operations can be performed.

Stream operations are either intermediate or terminal.

The terminal operations return a result of a certain type and intermediate operations return the stream itself so we can chain multiple meinods in a row to perform the operation in multiple steps.

Streams are created on a source, e.g. a java.util.Collection like List or Set

Stream operations can either be executed sequentially or parallel. when performed parallelly, it is called a parallel stream.
a stream is :
Not a data structure
Designed for lambdas
Do not support indexed access
Can easily be aggregated as arrays or lists
Lazy access supported
Parallelizable


streams are wrappers around a data source, allowing us to operate with that data source and making bulk processing convenient and fast.
A stream does not store data and, in that sense, is not a data structure. It also never modifies the underlying data source.
A Stream in Java 8 can be defined as a sequence of elements from a source. Streams supports aggregate operations on the elements. The source of elements here refers to a Collection or Array that provides data to the Stream.
Stream keeps the ordering of the elements the same as the ordering in the source. The aggregate operations are operations that allow us to express common manipulations on stream elements quickly and clearly.
Java 8 Streams are designed in such a way that most of the stream operations return a stream. This helps us to create a chain of stream operations, This is called as pipe-lining.


Introduced in Java 8, the Stream API is used to process collections of objects. A stream is a sequence of objects that supports various methods which can be pipelined to produce the desired result.
The features of Java stream are -
A stream is not a data structure instead it takes input from the Collections, Arrays or 1/0 channels.
Streams don't change the original data structure, they only provide the result as per the pipelined methods.
Each intermediate operation is lazily executed and returns a stream as a result, hence various intermediate operations can be pipelined. Terminal operations mark the end of the stream and return the result.
Different Operations On Streams-
Intermediate Operations:
map: The map method is used to returns a stream consisting of the results of applying the given function to the elements of this stream.
List number = Arrays.asList(2,3,4,5);
List square = number.stream ().map(x->x*x).collect(Collectors.toList));
filter: The filter method is used to select elements as per the Predicate passed as argument.
List names = Arrays.asList("Reflection", "Collection", "Stream");
List result = names.stream ).filter(s->s.startsWith("S")).collect(Collectors.toList());
sorted: The sorted method is used to sort the stream.
List names = Arrays.asList("Reflection", "Collection","Stream");
List result = names.stream().sorted().collect(Collectors.toList());

Terminal Operations:
collect: The collect method is used to return the result of the intermediate operations performed on the stream.
List number = Arrays.asList(2,3,4,5,3);
Set square = number.stream ).map(x->x"x).collectCollectors.toSet);

forEach: The forEach method is used to iterate through every element of the stream.
List number = Arrays.asList(2,3,4,5);
number.stream().map(x->x*x).forEach(y->System.out.println(y));

reduce: The reduce method is used to reduce the elements of a stream to a single value.
The reduce method takes a BinaryOperator as a parameter.

List number = Arrays.asList(2,3,4,5);
int even = number.stream().filter(x->x%2==0).reduce(0,(ans,i)-> ans+i);
Here ans variable is assigned 0 as the initial value and i is added to it.



