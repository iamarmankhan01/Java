Thread Pools are useful when you need to limit the number of threads running in your application at the same time. There is a performance overhead associated with starting a
to useful when you
new thread, and each thread is also allocated some memory for its stack etc.
Server that processing requests can spend more time and consume more system resources in creating and destroying threads than it would processing actual client requests.
6
Instead of starting a new thread for every task to execute concurrently, the task can be passed to a thread pool. As soon as the pool has anyIidle threads the task is assigned to one of them and executed. Internally the tasks are inserted into a Blocking lueue which the threads in the pool are dequeuing from. When a new task is inserted into the queue one of the idle threads will dequeue it successfully and execute it. The rest of the idle threads in the pool will be blocked waiting to dequeue tasks.
It's a pool of worker threads with life cycle as follows:
1. Get a new task to execute
2. Execute it
3. Go back to waiting for next task
Thread pools are often used in multi threaded servers. Each connection arriving at the server via the network is wrapped as a task and passed on to a thread pool. The threads in the thread pool will process the requests on the connectionsÂ concurrently.
